
Summary
=======

tsapp provides a tool, `tsapp` for creating browser-based applications
for use with [TiddlySpace](http://tiddlyspace.com/). Such applications are
made of one or more html files along with one or more CSS and JavaScript
files for presenting and access the tiddler data that lives in TiddlySpace.

The combination can be very useful for rapid development of web applications
that need a persistent but simple data store with a clean, robust API.

Install
=======

_This part is not yet true as the code has not been released to pypi yet.
In the meantime clone the repo to access the files._

tsapp is a Python 2 based tool. You will need a Python installation (2.5
and above). `pip` is used for installation. If you don't have pip you can
learn how to get it [here](http://www.pip-installer.org/).

```
pip install -U tsapp
```

Once installed the `tsapp` script should be on your `$PATH`.

Commands
========

`tsapp` provides a single script that takes multiple commands. Running 
`tsapp help` will list the relevant commands. The following lists 
available commands. Those commands which are not yet completed are marked
with `TBC`.

init
----

`tsapp init <app name>`

Create an app directory named whatever you give you for `<app name>`. 
Inside the directory will be a stub `index.html` file and an assets
directory. `index.html` is used as the primary access page of your
app. JavaScript, CSS, and other files go in assets.

serve
-----

`tsapp serve`

Run a local web server that will serve up your HTML file and other assets.
Any assets which are not found locally will be looked for at the target
TiddlySpace server (see configuration below). Paths to
`/bags/<somebag>/tiddlers/<sometiddler>` will first try to load
`assets/<sometiddler>` locally. If that is not found, then the original
path will be looked up on the TiddlySpace server.

The proxy server will always send `PUT`, `POST` and `DELETE` requests
to the target server.

The goal with this arrangement is to allow the local files to not have
to change when pushed to the target server for eventual hosting.

push
----

`tsapp push <bag name>`

Push (via HTTP `PUT`) all the local assets to the target server, in the
bag named by `<bag name>`. If the bag does not end with `_private` or
`_public`, then `_public` will be appended.

Files that have a `.html` or `.tid` extension on the source file will
have the extension removed on the target.

auth
----

`tsapp auth <username>`

Authenticate to the target_server as username and write the resulting
auth token to the local directory's configuration file.

delete
------

`tsapp delete <bag name> <tiddler title>`

A convenience method for removing a tiddler that's ended up on the
server that is no longer needed and may be in the way.

Configuration
=============

tsapp looks for a `.tsapp` configuration file in the current user's `$HOME`
and in the current directory. `$HOME/.tsapp` overrides defaults and 
`./.tsapp` overrides `$HOME/.tsapp`. There is no requirement for a configuration
file in the the home directory if one is not desired. However, in order
for the `push` command to work, a `.tsapp` containing an `auth_token` must
be found. The `auth` command will create one. The fields are:

target_server
-------------

The URL (without trailing `/`) of the home tiddlyspace server. Defaults to
`http://tiddlyspace.com`.

local_host
----------

The hostname or IP to which to bind the local proxy. Default is `0.0.0.0`.

port
----

The port to which to bind the local proxy. Default is `8080`.

auth_token
----------

Auth secret for accessing private resources on the target server. No default.
Set it with the `auth` command or copy in the tiddlyweb_user cookie.

Examples
========

`TBC`

Acknowledgements
================

Thanks to @bengillies for his `tsupload` script which provided some of the
motivation for creating this.
